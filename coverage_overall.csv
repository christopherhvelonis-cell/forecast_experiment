# Tools/canonicalize_coverage.py
import csv, pathlib
ROOT = pathlib.Path(__file__).resolve().parents[1]
V2   = ROOT / "eval" / "results" / "v2"

def _f(x): 
    try: return float(str(x).replace(",", "."))
    except: return None

def read_any(p: pathlib.Path):
    with p.open(encoding="utf-8", newline="") as f:
        r = list(csv.reader(f))
    if not r: return []
    hdr = [ (h or "").strip().lstrip("\ufeff").lower() for h in r[0] ]
    rows = r[1:]
    out = []
    # Accept: indicator,cov50_overall,cov90_overall
    if set(["indicator","cov50_overall","cov90_overall"]).issubset(hdr):
        i = hdr.index("indicator"); a = hdr.index("cov50_overall"); b = hdr.index("cov90_overall")
        out += [("0.5", _f(x[a])) for x in rows if len(x)>a and x[i]]
        out += [("0.9", _f(x[b])) for x in rows if len(x)>b and x[i]]
    # Accept: indicator,0.5,0.9
    elif set(["indicator","0.5","0.9"]).issubset(hdr):
        i = hdr.index("indicator"); a = hdr.index("0.5"); b = hdr.index("0.9")
        out += [("0.5", _f(x[a])) for x in rows if len(x)>a and x[i]]
        out += [("0.9", _f(x[b])) for x in rows if len(x)>b and x[i]]
    # Accept: level,empirical
    elif set(["level","empirical"]).issubset(hdr):
        a = hdr.index("level"); b = hdr.index("empirical")
        out += [(str(x[a]).strip(), _f(x[b])) for x in rows if len(x)>b]
    # Accept: coverage,value
    elif set(["coverage","value"]).issubset(hdr):
        a = hdr.index("coverage"); b = hdr.index("value")
        out += [(str(x[a]).strip(), _f(x[b])) for x in rows if len(x)>b]
    # dedupe to last write wins
    d = {}
    for k,v in out:
        if k in ("0.5","50%","50"): k="0.5"
        if k in ("0.9","90%","90"): k="0.9"
        if v is not None: d[k]=v
    return [("0.5", d.get("0.5")), ("0.9", d.get("0.9"))]

def write_canonical(p: pathlib.Path, pairs):
    with p.open("w", encoding="utf-8", newline="") as f:
        w = csv.writer(f); w.writerow(["level","empirical"])
        for k,v in pairs:
            if v is not None: w.writerow([k, f"{v:.6f}"])

def main():
    for y in (1995,2000,2005,2010):
        p = V2 / f"FINAL_{y}" / "coverage_overall.csv"
        if not p.exists(): 
            print(f"[skip] {y} no coverage_overall.csv"); continue
        pairs = read_any(p)
        write_canonical(p, pairs)
        print(f"[canon] {y} -> level,empirical")

if __name__ == "__main__":
    main()
